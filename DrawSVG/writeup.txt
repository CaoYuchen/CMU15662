AndrewID: yuchenca

Task 1:
    Notice that glColor4f() requires value of color from 0 to 1, unlike the software_renderer one with 0 to 255.
    Fully implemented.

Task 2:
    Note that when |(y1-y0)/(x1-x0)| is larger than 1, it is not easy to calculate the approximate points of y+e as x+1,
    it's better to make step long y, and to calculate x+e, which means inverse the ratio.
    Fully implemented.

Task 3:
    If we first draw the lines of triangle, we don't need to consider the situation of Barycentric Algorithm,
     where ratio of cross product equals 0 and sum of ratio of cross product is 1.
    Fully implemented.

Task 4:
    I spent lots of time there, and I didn't finish this part before checkpoint, because I wasn't careful enough about the superpixel's
    scale is enlarged in everyway, we need also add those scale change to rasterize triangle and line and point. In the end, I'm not 
    quite sure if I implement it correctly or not.

Task 5:
    This task is quite straight forward... And if we look at hardware_renderer in the same place, it's basically explaining everything.
    Fully implemented.

Task 6:
    
    Fully implemented.

Task 7:

    Fully implemented.

Task 8:
    I think I implemented the correct math formula, but it seems my result doesn't really work. I think the problem is that
    I don't know how to sort depth among multiple alpha color. But the svg doesn't have depth information....

Extra credit:

    I completed the following extra credit work... (or N/A)

Any other comments and considerations:

    ....